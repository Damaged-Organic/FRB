<?php
// src/AppBundle/Entity/Vacancy.php
namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM,
    Doctrine\Common\Collections\ArrayCollection;

use Gedmo\Mapping\Annotation as Gedmo,
    Gedmo\Translatable\Translatable;

use AppBundle\Entity\Utility\DoctrineMapping\IdMapper,
    AppBundle\Entity\Utility\DoctrineMapping\TranslationMapper;

/**
 * @ORM\Table(name="vacancies")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\Repository\VacancyRepository")
 *
 * @Gedmo\TranslationEntity(class="AppBundle\Entity\VacancyTranslation")
 */
class Vacancy implements Translatable
{
    use IdMapper, TranslationMapper;

    /**
     * @ORM\OneToMany(targetEntity="VacancyTranslation", mappedBy="object", cascade={"persist", "remove"})
     **/
    protected $translations;

    /**
     * @ORM\OneToMany(targetEntity="VacancyList", mappedBy="vacancyRequirement", cascade={"persist", "remove"}, orphanRemoval=true)
     **/
    protected $listRequirements;

    /**
     * @ORM\OneToMany(targetEntity="VacancyList", mappedBy="vacancyTask", cascade={"persist", "remove"}, orphanRemoval=true)
     **/
    protected $listTasks;

    /**
     * @ORM\OneToMany(targetEntity="VacancyList", mappedBy="vacancyAdvantage", cascade={"persist", "remove"}, orphanRemoval=true)
     **/
    protected $listAdvantages;

    /**
     * @ORM\Column(type="string", length=255, nullable=false)
     *
     * @Gedmo\Translatable
     **/
    protected $title;

    /**
     * @ORM\Column(type="text", nullable=false)
     *
     * @Gedmo\Translatable
     **/
    protected $shortDescription;

    /**
     * @ORM\Column(type="text", nullable=true)
     **/
    protected $rawShortDescription;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     **/
    protected $shortDescriptionFormatter;

    /**
     * @ORM\Column(type="boolean", nullable=false)
     **/
    protected $isActive = TRUE;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->translations = new ArrayCollection;
    }

    /**
     * To string
     */
    public function __toString()
    {
        return ( $this->title ) ? $this->title : "";
    }


}